#在pom.xml添加依赖
```
<dependency>
   <groupId>org.apache.shiro</groupId>
   <artifactId>shiro-spring</artifactId>
   <version>1.4.0</version>
</dependency>
```
#生成7张表
在数据库中分别生成sys_user(用户表)、sys_role（角色表）、sys_usr_role（用户与角色关联表，一对多）、sys_menu(菜单表)、sys_role_menu（角色与菜单关联表，一对多）、sys_office（机构表）、sys_role_office（角色与机构关联表，一对多）
并写好基础的dao、service层。  
编辑登录的Controller层
```
    @RequestMapping(value = "/login", method = RequestMethod.POST)
    @ResponseBody
    public Object login(String loginName, String password) {
        HashMap<String, Object> rtn = new HashMap<>();
        //将用户名和密码封装到UsernamePasswordToken
        UsernamePasswordToken token = new UsernamePasswordToken(loginName, password);
        token.setRememberMe(true);
        //获取当前用户是否登录
        Subject currentUser = SecurityUtils.getSubject();
        //判断当前用户是否登录
        //if (currentUser.isAuthenticated() == false) {
        //
        //}
        try {
            System.out.println("对用户[" + loginName + "]进行登录验证..验证开始");
            //传到MyAuthorizingRealm类中的方法进行认证
            currentUser.login(token);
            System.out.println("对用户[" + loginName + "]进行登录验证..验证通过");
        } catch (UnknownAccountException uae) {
            //未知账号异常
            System.out.println("对用户[" + loginName + "]进行登录验证..验证未通过,未知账户");
            rtn.put("msg", "未知账户");
            currentUser.logout();
        } catch (IncorrectCredentialsException ice) {
            //密码不正确异常
            System.out.println("对用户[" + loginName + "]进行登录验证..验证未通过,错误的凭证");
            rtn.put("msg", "密码不正确");
            currentUser.logout();
        } catch (LockedAccountException lae) {
            //账号已锁定异常
            System.out.println("对用户[" + loginName + "]进行登录验证..验证未通过,账户已锁定");
            rtn.put("msg", "账户已锁定");
            currentUser.logout();
        } catch (ExcessiveAttemptsException eae) {
            //用户名或密码错误次数过多
            System.out.println("对用户[" + loginName + "]进行登录验证..验证未通过,错误次数过多");
            rtn.put("msg", "用户名或密码错误次数过多");
            currentUser.logout();
        } catch (AuthenticationException ae) {
            //通过处理Shiro的运行时AuthenticationException就可以控制用户登录失败或密码错误时的情景
            System.out.println("对用户[" + loginName + "]进行登录验证..验证未通过,堆栈轨迹如下");
            ae.printStackTrace();
            rtn.put("msg", "用户名或密码不正确");
            currentUser.logout();
        }
```
#shiro核心配置
```
public class MyRealm extends BaseRealm {

    @Autowired
    UserService userService;

    @Autowired
    LoginUtils utils;

    /**
     * 身份认证
     * Subject currentUser = SecurityUtils.getSubject(); currentUser.login(token); --调用login方法时就会调用该方法
     *
     * @param authenticationToken
     * @return
     * @throws AuthenticationException
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken authenticationToken) throws AuthenticationException {
        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;
        String username = token.getUsername();
        HashMap<String, Object> params = new HashMap<>();
        params.put("delFlag", DeleteFlagEnum.NORMAL.getCode());
        params.put("loginName", username);
        List<User> userList = userService.findBy(params);
        if (userList.size() > 0) {
            User user = userList.get(0);
            if (user != null) {
                if (user.getLoginFlag().equals(0)) {
                    throw new LockedAccountException();
                }
                SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(
                        user.getLoginName(),
                        user.getPassword(),// 密码
                        ByteSource.Util.bytes(user.getSalt()),//salt
                        this.getClass().getName()
                );
                utils.setSession(user);
                return authenticationInfo;
            }
        }
        return null;
    }

}
```

```
public abstract class BaseRealm extends AuthorizingRealm{

    @Autowired
    LoginUtils utils;

    Logger logger = Logger.getLogger(this.getName());

    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        String loginName = (String) principals.getPrimaryPrincipal();
        SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();
        Set<String> roleNames = utils.getRoleNamesBy(loginName);
        authorizationInfo.setRoles(roleNames);
        Set<String> permissionName = utils.getPermissionsBy();
        authorizationInfo.setStringPermissions(permissionName);
        return authorizationInfo;
    }

    public void clear(PrincipalCollection principals){
        clearCachedAuthorizationInfo(principals);
    }

    @Override
    protected void clearCachedAuthorizationInfo(PrincipalCollection principals) {
        System.out.println("清除【授权】缓存之前");
        Cache c = getAuthorizationCache();
        for(Object o : c.keys()){
            System.out.println( o + " , " + c.get(o));
        }
        super.clearCachedAuthorizationInfo(principals);
        System.out.println("清除【授权】缓存之后");
        int cacheSize = c.keys().size();
        System.out.println("【授权】缓存的大小:" + cacheSize);

        for(Object o : c.keys()){
            System.out.println( o + " , " + c.get(o));
        }
        if(cacheSize == 0){
            System.out.println("说明【授权】缓存被清空了。");
        }
    }

}

```

```
/**
 * Created by panwei on 16/10/18.
 */
@Configuration
public class ShiroConfiguration {

    @Bean
    public EhCacheManager ehCacheManager() {
        EhCacheManager cacheManager = new EhCacheManager();
        cacheManager.setCacheManagerConfigFile("classpath:ehcache.xml");
        return cacheManager;
    }

    @Bean(name="credentialsMatcher")
    public CredentialsMatcher credentialsMatcher() {
        return new CredentialsMatcher();
    }

    @Bean(name="ldapCredentialsMatcher")
    public LdapCredentialsMatcher ldapCredentialsMatcher() {
        return new LdapCredentialsMatcher();
    }

    @Bean
    public MyRealm myRealm() {
        MyRealm myRealm = new MyRealm();
        myRealm.setCacheManager(ehCacheManager());
        myRealm.setCredentialsMatcher(credentialsMatcher());
        myRealm.setAuthenticationCachingEnabled(true);
        return myRealm;
    }

    @Bean(name = "lifecycleBeanPostProcessor")
    public LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {
        return new LifecycleBeanPostProcessor();
    }

    @Bean
    public LdapRealm ldapRealm(){
        LdapRealm ldapRealm = new LdapRealm();
        ldapRealm.setCacheManager(ehCacheManager());
        ldapRealm.setCredentialsMatcher(ldapCredentialsMatcher());
        ldapRealm.setAuthenticationCachingEnabled(true);
        return ldapRealm;
    }

    @Bean
    public ModularRealmAuthenticator modularRealmAuthenticator(){
        ModularRealmAuthenticator modularRealmAuthenticator = new MyModularRealmAuthenticator();
        modularRealmAuthenticator.setAuthenticationStrategy(new MySuccessStrategy());
        return modularRealmAuthenticator;
    }

    @Bean
    @DependsOn("lifecycleBeanPostProcessor")
    public DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator() {
        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();
        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);
        return defaultAdvisorAutoProxyCreator;
    }

    @Bean
    public FilterRegistrationBean filterRegistrationBean() {
        FilterRegistrationBean filterRegistration = new FilterRegistrationBean();
        filterRegistration.setFilter(new DelegatingFilterProxy("shiroFilter"));
        filterRegistration.setEnabled(true);
        filterRegistration.addUrlPatterns("/*");
        filterRegistration.setDispatcherTypes(DispatcherType.REQUEST);
        return filterRegistration;
    }

    @Bean(name = "securityManager")
    public DefaultWebSecurityManager securityManager() {
        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();
        securityManager.setAuthenticator(modularRealmAuthenticator());
        Collection<Realm> realms = new ArrayList<>();
        realms.add(myRealm());
        realms.add(ldapRealm());
        securityManager.setRealms(realms);
        securityManager.setSessionManager(sessionManager());
        // 用户授权/认证信息Cache, 采用EhCache 缓存
        securityManager.setCacheManager(ehCacheManager());
        return securityManager;
    }

    @Bean
    public SessionManager sessionManager(){
        DefaultWebSessionManager sessionManager = new DefaultWebSessionManager();
        return sessionManager;
    }
    /**
     *  开启shiro aop注解支持.
     *  使用代理方式;所以需要开启代码支持;
     *
     *
     */
    @Bean
    public AuthorizationAttributeSourceAdvisor sourceAdvisor() {
        AuthorizationAttributeSourceAdvisor sourceAdvisor = new AuthorizationAttributeSourceAdvisor();
        sourceAdvisor.setSecurityManager(securityManager());
        return sourceAdvisor;
    }

    @Bean(name = "shiroFilter")
    public ShiroFilterFactoryBean shiroFilterFactoryBean() {
        ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();
        shiroFilterFactoryBean.setSecurityManager(securityManager());
        shiroFilterFactoryBean.setLoginUrl("/login");
        shiroFilterFactoryBean.setSuccessUrl("/");
        shiroFilterFactoryBean.setUnauthorizedUrl("/noPower");//没有跳转
//        原因：
//        shiro的源代码ShiroFilterFactoryBean.Java定义的filter必须满足filter instanceof AuthorizationFilter，只有perms，roles，ssl，rest，port才是属于AuthorizationFilter，而anon，authcBasic，auchc，user是AuthenticationFilter，所以unauthorizedUrl设置后页面不跳转
//        Shiro注解模式下，登录失败与没有权限都是通过抛出异常。并且默认并没有去处理或者捕获这些异常。在SpringMVC下需要配置捕获相应异常来通知用户信息

        // 过滤链 // TODO: 2017/6/6 每次改动时都要重启,后期建个过滤连表,并做个管理页面。
        //配置不会被拦截的链接 顺序判断，因为前端模板采用了thymeleaf，这里不能直接使用 ("/static/**", "anon")来配置匿名访问，必须配置到每个静态目录
        Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();
        filterChainDefinitionMap.put("/login", "anon");
        filterChainDefinitionMap.put("/logout", "anon");
        filterChainDefinitionMap.put("/error","anon");
        filterChainDefinitionMap.put("/static/**","anon");

        // authc:所有url都必须认证通过才可以访问; anon:所有url都都可以匿名访问
        filterChainDefinitionMap.put("/**", "authc");
        return shiroFilterFactoryBean;
    }

    @Bean
    public SimpleMappingExceptionResolver simpleMappingExceptionResolver() {
        SimpleMappingExceptionResolver simpleMappingExceptionResolver = new SimpleMappingExceptionResolver();
        Properties mappings = new Properties();
        mappings.put("AuthorizationException", "/noPower");//数据库异常处理
//        mappings.put("UnauthorizedException", "/noPower");
        simpleMappingExceptionResolver.setExceptionMappings(mappings);
        return simpleMappingExceptionResolver;
    }

//    @Bean
//    public ShiroDialect shiroDialect() {
//        return new ShiroDialect();
//    }

}


```
